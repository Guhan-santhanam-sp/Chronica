/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package chronica.ui.customer;

import chronica.model.task.Task;
import chronica.model.task.TaskDirectory;
import chronica.model.user.User;
import chronica.model.event.Event;
import chronica.model.event.EventDirectory;
import java.awt.CardLayout;
import java.awt.Component;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Gooqe
 */
public class CustomerBookingHistory extends javax.swing.JPanel {
    
    JPanel customerPanel;
    EventDirectory eventDirectory;
    User customer;

    /**
     * Creates new form CustomerBookingHistory
     */
    public CustomerBookingHistory(JPanel customerPanel, EventDirectory eventDirectory, User customer) {
        initComponents();
        this.customerPanel = customerPanel;
        this.eventDirectory = eventDirectory;
        this.customer = customer;
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnback = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblEvents = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        btnback.setText("<");
        btnback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnbackActionPerformed(evt);
            }
        });

        tblEvents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Event Name", "Date", "Location", "Budget", "Attendee", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblEvents);

        jButton1.setText("Cancel Event");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(110, 110, 110)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 972, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnback, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(96, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addComponent(btnback)
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 632, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jButton1)
                .addContainerGap(51, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnbackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnbackActionPerformed
        // TODO add your handling code here:
        customerPanel.remove(this);
        Component[] componentArray = customerPanel.getComponents();
        Component component = componentArray[componentArray.length - 1];
        CustomerPanel CustomerPaneljpanel = (CustomerPanel) component;
        CustomerPaneljpanel.populateTable();
        CardLayout layout = (CardLayout) customerPanel.getLayout();
        layout.previous(customerPanel);
    }//GEN-LAST:event_btnbackActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int selectedrow = tblEvents.getSelectedRow();
        if (selectedrow >= 0) {
            Event selectedEvent = (Event) tblEvents.getValueAt(selectedrow, 0);
            eventDirectory.removeEvent(selectedEvent.getEventId());
            JOptionPane.showMessageDialog(this, "Event Deleted.", "Information", JOptionPane.INFORMATION_MESSAGE);
            populateTable();
            
        } else {
            JOptionPane.showMessageDialog(this, "Please a select a Task to delete from the list", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnback;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblEvents;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {
        System.out.println("Customer history booking");
        DefaultTableModel model = (DefaultTableModel) tblEvents.getModel();
        model.setRowCount(0);
        boolean isComplete = true;
        String status;
        
        for (Event e : eventDirectory.getEventsByUser(customer)) {
            Object row[] = new Object[6];
            
            row[0] = e;
            row[1] = e.getDate();
            row[2] = e.getLocation();
            row[3] = e.getBudget();
            row[4] = e.getTotalattendees();
            for (Task t : e.getTaskDirectory().getTasksByUser(customer)) {
              
                if (!t.isStatus()) {
                    isComplete = false;
                }
                
            }
            if (isComplete) {
                status = "Completed";
            } else {
                status = "Pending";
            }
            row[5] = status;
            
            model.addRow(row);
            
        }
        
    }
}
